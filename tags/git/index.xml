<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git | Dmitry Avtonomov</title>
    <link>https://dmtavt.com/tags/git/</link>
      <atom:link href="https://dmtavt.com/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <description>git</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2016-present Dmitry Avtonomov</copyright><lastBuildDate>Sun, 25 Nov 2018 00:00:00 -0800</lastBuildDate>
    <image>
      <url>https://dmtavt.com/images/icon_hua06b220db3e60330d8fb3c0279ba5942_14310_512x512_fill_gaussian_center_2.png</url>
      <title>git</title>
      <link>https://dmtavt.com/tags/git/</link>
    </image>
    
    <item>
      <title>Adding all existing submodules to a git repo</title>
      <link>https://dmtavt.com/post/2018-11-25-adding-all-git-submodules/</link>
      <pubDate>Sun, 25 Nov 2018 00:00:00 -0800</pubDate>
      <guid>https://dmtavt.com/post/2018-11-25-adding-all-git-submodules/</guid>
      <description>&lt;p&gt;You have a git repo (a directory) which contains sub-directories which are git
repos themselves and now you want them to become submodules. Here&#39;s a quick
automatic way to add them all.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remove &lt;code&gt;-maxdepth&lt;/code&gt; if you want to recursively dig deeper than 1 level.&lt;/li&gt;
&lt;li&gt;Assumes that each submodule has a remote named &lt;code&gt;origin&lt;/code&gt;, uses that remote&#39;s
url.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;preview-command&#34;&gt;Preview command&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;for x in $(find . -mindepth 1 -maxdepth 1 -type d) ; do if [ -d &amp;quot;${x}/.git&amp;quot; ] ; then cd &amp;quot;${x}&amp;quot; ; origin=&amp;quot;$(git config --get remote.origin.url)&amp;quot; ; cd - 1&amp;gt;/dev/null; echo git submodule add &amp;quot;${origin}&amp;quot; &amp;quot;${x}&amp;quot; ; fi ; done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Will &lt;strong&gt;only print&lt;/strong&gt; the submodule commands to be executed, but NOT execute them.&lt;/p&gt;
&lt;h3 id=&#34;actual-command&#34;&gt;Actual command&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;for x in $(find . -mindepth 1 -maxdepth 1 -type d) ; do if [ -d &amp;quot;${x}/.git&amp;quot; ] ; then cd &amp;quot;${x}&amp;quot; ; origin=&amp;quot;$(git config --get remote.origin.url)&amp;quot; ; cd - 1&amp;gt;/dev/null; git submodule add &amp;quot;${origin}&amp;quot; &amp;quot;${x}&amp;quot; ; fi ; done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Will &lt;strong&gt;execute&lt;/strong&gt; the actual submodule commands.&lt;/p&gt;
&lt;h2 id=&#34;readable-versions&#34;&gt;Readable versions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Preview&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;for x in $(find . -mindepth 1 -maxdepth 1 -type d) ; do 
  if [ -d &amp;quot;${x}/.git&amp;quot; ] ;
    then cd &amp;quot;${x}&amp;quot; ;
    origin=&amp;quot;$(git config --get remote.origin.url)&amp;quot; ;
    cd - 1&amp;gt;/dev/null;
    echo git submodule add &amp;quot;${origin}&amp;quot; &amp;quot;${x}&amp;quot; ;
  fi ;
done
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Execute&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;for x in $(find . -mindepth 1 -maxdepth 1 -type d) ; do 
  if [ -d &amp;quot;${x}/.git&amp;quot; ] ; 
    then cd &amp;quot;${x}&amp;quot; ; 
    origin=&amp;quot;$(git config --get remote.origin.url)&amp;quot; ; 
    cd - 1&amp;gt;/dev/null; 
    git submodule add &amp;quot;${origin}&amp;quot; &amp;quot;${x}&amp;quot; ; 
  fi ; 
done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Credit (modified from an answer here)&lt;/em&gt;:&lt;br&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/10606101/automatically-add-all-submodules-to-a-repo&#34;&gt;https://stackoverflow.com/questions/10606101/automatically-add-all-submodules-to-a-repo&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use p4merge from Perforce as default git mergetool</title>
      <link>https://dmtavt.com/post/2018-09-07-p4merge-as-git-merge-tool/</link>
      <pubDate>Fri, 07 Sep 2018 00:00:00 -0700</pubDate>
      <guid>https://dmtavt.com/post/2018-09-07-p4merge-as-git-merge-tool/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;p4merge-conflict-resolution.png&#34; alt=&#34;p4merge-conflict-resolution-screenshot&#34;&gt;&lt;/p&gt;
&lt;p&gt;A while ago this took more effort as described 
&lt;a href=&#34;https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;in this
link&lt;/a&gt;
 (scroll
to section  &amp;lsquo;External Merge and Diff Tools&amp;rsquo;).&lt;/p&gt;
&lt;p&gt;Not anymore. Now git natively supports p4merge. So you only need to modify your
global git config (&lt;code&gt;~/.gitconfig&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[merge]
	tool = p4merge
[mergetool &amp;quot;p4merge&amp;quot;]
	path = p4merge.exe
[diff]
	tool = p4merge
[difftool &amp;quot;p4merge&amp;quot;]
	path = p4merge.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can provide the absolute path to the p4merge binary, but I have it on PATH
because I installed it with 
&lt;a href=&#34;https://scoop.sh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;scoop&lt;/a&gt;
.&lt;/p&gt;
&lt;h2 id=&#34;install-p4merge-with-scoop&#34;&gt;Install p4merge with scoop&lt;/h2&gt;
&lt;p&gt;To get scoop, from the PowerShell execute:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Set-ExecutionPolicy RemoteSigned -scope CurrentUser
iex (new-object net.webclient).downloadstring(&#39;https://get.scoop.sh&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;p4merge&lt;/em&gt; is in the 
&lt;a href=&#34;https://github.com/lukesampson/scoop-extras&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;extras&lt;/strong&gt;
scoop bucket&lt;/a&gt;
, add the bucket first
to be able to install it easily:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;scoop bucket add extras
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then you can install p4merge&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;scoop update
scoop search p4merge
scoop install p4merge
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To list all you installed scoop apps with PowerShell:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;(scoop list) | sls &#39;^  (\w+)&#39; |% { $_.matches.groups[1].value }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;full-gitconfig&#34;&gt;Full .gitconfig&lt;/h2&gt;
&lt;p&gt;My full &lt;code&gt;.gitconfig&lt;/code&gt; is below. It &lt;code&gt;[include]&lt;/code&gt;s two paths &lt;code&gt;.gitaliases&lt;/code&gt; and
&lt;code&gt;.gitmorealiases&lt;/code&gt;, they are both just text files in my home directory, i.e.
they are siblings of my global &lt;code&gt;.gitconfig&lt;/code&gt; file. They contain, you guessed
it, &lt;strong&gt;git aliases&lt;/strong&gt;.
A large collection of aliases is 
&lt;a href=&#34;https://github.com/GitAlias/gitalias&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;available
here&lt;/a&gt;
. And 
&lt;a href=&#34;https://haacked.com/archive/2014/07/28/github-flow-aliases/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here is a very useful blog
post / tutorial&lt;/a&gt;

introducing you to the usefulness of aliases.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/chhh/c226cd37725ee6deb7a0.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
  </channel>
</rss>
