<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ssh | Dmitry Avtonomov</title>
    <link>https://dmtavt.com/tags/ssh/</link>
      <atom:link href="https://dmtavt.com/tags/ssh/index.xml" rel="self" type="application/rss+xml" />
    <description>ssh</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2016-present Dmitry Avtonomov</copyright><lastBuildDate>Mon, 03 Aug 2020 11:49:38 -0700</lastBuildDate>
    <image>
      <url>https://dmtavt.com/images/icon_hua06b220db3e60330d8fb3c0279ba5942_14310_512x512_fill_gaussian_center_2.png</url>
      <title>ssh</title>
      <link>https://dmtavt.com/tags/ssh/</link>
    </image>
    
    <item>
      <title>Automatically starting ssh-agent when powershell or git-bash are started</title>
      <link>https://dmtavt.com/post/2020-08-03-ssh-agent-powershell/</link>
      <pubDate>Mon, 03 Aug 2020 11:49:38 -0700</pubDate>
      <guid>https://dmtavt.com/post/2020-08-03-ssh-agent-powershell/</guid>
      <description>&lt;h2 id=&#34;windows-environment&#34;&gt;Windows environment&lt;/h2&gt;
&lt;p&gt;It&#39;s best to configure OpenSSH Authentication Agent service to automatically start.
Alternatively, you can start it manually every time when opening powershell for the first time:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Start-Service ssh-agent
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To have SSH agent to automatically start with Windows, you can run  (from elevated powershell prompt):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Set-Service ssh-agent -StartupType Automatic 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After that, you need to add your ssh key once:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;ssh-add C:\Users\your-name\ssh\id_rsa 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now everytime the &lt;code&gt;ssh-agent&lt;/code&gt; is started, the key will be there. You can check which keys are registered with the &lt;code&gt;ssh-agent&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;ssh-add -l
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Credit:
&lt;a href=&#34;https://superuser.com/questions/1327633/how-to-maintain-ssh-agent-login-session-with-windows-10s-new-openssh-and-powers&#34;&gt;https://superuser.com/questions/1327633/how-to-maintain-ssh-agent-login-session-with-windows-10s-new-openssh-and-powers&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;linux-like-environement&#34;&gt;Linux-like environement&lt;/h2&gt;
&lt;p&gt;On linux or in git-for-windows environment, I use the following snippet in my &lt;code&gt;.bashrc&lt;/code&gt; to achieve the same effect:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# This is used to start ssh-agent once when git-bash is started.
# Saves typing the ssh key password every time you interact with
# a remote repo.

env=~/.ssh/agent.env

agent_load_env () { test -f &amp;quot;$env&amp;quot; &amp;amp;&amp;amp; . &amp;quot;$env&amp;quot; &amp;gt;| /dev/null ; }

agent_start () {
    (umask 077; ssh-agent &amp;gt;| &amp;quot;$env&amp;quot;)
    . &amp;quot;$env&amp;quot; &amp;gt;| /dev/null ; }

agent_load_env

# agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2= agent not running
agent_run_state=$(ssh-add -l &amp;gt;| /dev/null 2&amp;gt;&amp;amp;1; echo $?)

if [ ! &amp;quot;$SSH_AUTH_SOCK&amp;quot; ] || [ $agent_run_state = 2 ]; then
    agent_start
    ssh-add
elif [ &amp;quot;$SSH_AUTH_SOCK&amp;quot; ] &amp;amp;&amp;amp; [ $agent_run_state = 1 ]; then
    ssh-add
fi

unset env
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
